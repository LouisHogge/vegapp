package com.vegAppTest.Entities;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.*;
import lombok.Data;

@Data

@Entity // mark the class as JPA entity
@Table(name = "gardener")
public class Gardener implements UserDetails {

    /* Roles for a gardener */
    public enum Role {
        ADMIN,
        USER,
    }

    @Id // mark the field id as the primary key of the entity
    @Column(name = "id") // id is mapped to the user_id column in the users table
    @GeneratedValue(strategy = GenerationType.IDENTITY) // specify that the primary key values are
                                                        // automatically generated by the database. Values
                                                        // produced by an identity column in the database
                                                        // are auto-incremented
    private Long id;

    @Column(name = "email", unique = true, length = 255) // email is mapped to the email column in the users table
    private String email;

    @Column(name = "first_name", length = 255) // First name is mapped to the First name column in the users table
    private String first_name;

    @Column(name = "last_name", length = 255) // Last name is mapped to the Last name column in the users table
    private String last_name;

    @Column(name = "password", length = 255) // password is mapped to the password column in the users table
    private String password;

    /* Relation Gardener - Catalogue */
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "gardener", cascade = CascadeType.ALL)

    @JsonIgnore
    private List<Garden> gardens;

    @Enumerated(EnumType.STRING)
    private Role role;

    public Gardener() {

    }

    public Gardener(String first_name, String last_name, String email, String password, Role role) {
        this.first_name = first_name;
        this.last_name = last_name;
        this.email = email;
        this.password = password;
        this.role = role;
        this.gardens = new ArrayList<>();
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {

        return List.of(new SimpleGrantedAuthority(role.name()));
    }

    @Override
    public String getUsername() {

        return email;
    }

    @Override
    public boolean isAccountNonExpired() {

        return true;
    }

    @Override
    public boolean isAccountNonLocked() {

        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {

        return true;
    }

    @Override
    public boolean isEnabled() {

        return true;
    }

}
